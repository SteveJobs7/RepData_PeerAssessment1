library(ggplot2)
library(ggplot)
library(gplot)
qplot
help.qplot
search.qplot
search qplot
help.search("qplot")
library(grDevices)
qplot
install.packages("ggplot2")
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
?geom
?qplot
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
g <- g + geo_point()
g <- g + geom_point()
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies) + geom_smooth()
library(lubridate)
library(reshape2)
require(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, host='192.168.1.111', user="flexible_netflow", password="", dbname="flexible_netflow")
query_res <- dbGetQuery(con,"select flowdata_te, flowdata_ibyt, flowdata_ra from flowdata where ( ( flowdata_te >= '2014-05-05T00:00:00' AND flowdata_te < '2014-05-11T23:59:59' ) and flowdata_ra='158.125.48.166' );")
overall_time <- as.numeric(difftime(query_res[nrow(query_res),"flowdata_te"],query_res[1,"flowdata_te"], unit="secs"))
avg_throughput <- (sum(as.numeric(query_res$flowdata_ibyt)/1024)) / overall_time    # KByte per seconds
KBytes_pm <- (tapply(query_res$flowdata_ibyt, cut(query_res$flowdata_te, breaks='1 min'), sum)) / 1024
# Make 1D array into Data Frame
KBpm_DF <- data.frame(key= names(KBytes_pm), value=as.numeric(KBytes_pm))
KBpm_DF$key <- as.character(KBpm_DF$key)
KBpm_DF$key <- strptime(KBpm_DF$key, format="%Y-%m-%d %H:%M:%S")
# Remove NA inserted during tapply step (because there might not be any flows ending at a specific minute)
KBpm_DF <- KBpm_DF[complete.cases(KBpm_DF$value),]
options(scipen=1)
plot(KBpm_DF$key, KBpm_DF$value, type ="l", xlab="", ylab="KBytes per minute", col="blue")
dbDisconnect(con)
dbUnloadDriver(drv)
KBpm_DF
query_res <- dbGetQuery(con,"select flowdata_ts, flowdata_te, flowdata_td, flowdata_sa, flowdata_da, flowdata_ipkt, flowdata_ibyt, flowdata_opkt, flowdata_obyt, flowdata_ra from flowdata where ( ( flowdata_te >= '2014-05-07T14:41:50' AND flowdata_te < '2014-05-07T14:51:50' ) and flowdata_ra='158.125.48.166' );")
library(lubridate)
library(reshape2)
require(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, host='192.168.1.111', user="flexible_netflow", password="", dbname="flexible_netflow")
#dbListConnections(drv)
#dbGetInfo(drv)
#summary(con)
#rs <- dbSendQuery(con,"select * from flowdata_1392634800;")
#fetch(rs,n=-1)
query_res <- dbGetQuery(con,"select flowdata_ts, flowdata_te, flowdata_td, flowdata_sa, flowdata_da, flowdata_ipkt, flowdata_ibyt, flowdata_opkt, flowdata_obyt, flowdata_ra from flowdata where ( ( flowdata_te >= '2014-05-07T14:41:50' AND flowdata_te < '2014-05-07T14:51:50' ) and flowdata_ra='158.125.48.166' );")
#query_res <- dbGetQuery(con,"select flowdata_ts, flowdata_te, flowdata_sa, flowdata_da, flowdata_sp, flowdata_dp, flowdata_pr, flowdata_ipkt, flowdata_ibyt, flowdata_ra from flowdata where ( ( flowdata_te >= '2014-05-05T00:00:00' AND flowdata_te < '2014-05-11T23:59:59' ) and flowdata_ra='158.125.48.166' );")
#query_res <- dbGetQuery(con,"select flowdata_te, flowdata_ibyt, flowdata_ra from flowdata where ( ( flowdata_te >= '2014-05-05T00:00:00' AND flowdata_te < '2014-05-11T23:59:59' ) and flowdata_ra='158.125.48.166' );")
overall_time <- as.numeric(difftime(query_res[nrow(query_res),"flowdata_te"],query_res[1,"flowdata_te"], unit="secs"))
avg_throughput <- (sum(as.numeric(query_res$flowdata_ibyt)/1024)) / overall_time    # KByte per seconds
#nu.mins <- floor(as.numeric(difftime(query_res[nrow(query_res),"flowdata_te"],query_res[1,"flowdata_te"], unit="mins")))
####
# query_res_clean <- quer_res[query_res2$flowdata_td > 0, ]
# query_res_clean$i_tput <- query_res_clean$flowdata_ibyt / query_res_clean$flowdata_td
# overall_time_clean <- as.numeric(difftime(query_res_clean[nrow(query_res_clean),1],query_res_clean[1,1], unit="secs"))
#avg_throughput_clean <- (sum(query_res_clean$flowdata_ibyt)/1024) / overall_time_clean	 # KByte per seconds
####
#break.points <- cut(query_res$flowdata_te, breaks='1 min')
KBytes_pm <- (tapply(query_res$flowdata_ibyt, cut(query_res$flowdata_te, breaks='1 min'), sum)) / 1024
# Make 1D array into Data Frame
KBpm_DF <- data.frame(key= names(KBytes_pm), value=as.numeric(KBytes_pm))
KBpm_DF$key <- as.character(KBpm_DF$key)
KBpm_DF$key <- strptime(KBpm_DF$key, format="%Y-%m-%d %H:%M:%S")
# Remove NA inserted during tapply step (because there might not be any flows ending at a specific minute)
KBpm_DF <- KBpm_DF[complete.cases(KBpm_DF$value),]
options(scipen=1)
plot(KBpm_DF$key, KBpm_DF$value, type ="l", xlab="", ylab="KBytes per minute", col="blue")
dbDisconnect(con)
dbUnloadDriver(drv)
library(lubridate)
library(reshape2)
require(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, host='192.168.1.111', user="flexible_netflow", password="", dbname="flexible_netflow")
#dbListConnections(drv)
#dbGetInfo(drv)
#summary(con)
#rs <- dbSendQuery(con,"select * from flowdata_1392634800;")
#fetch(rs,n=-1)
#query_res <- dbGetQuery(con,"select flowdata_ts, flowdata_te, flowdata_td, flowdata_sa, flowdata_da, flowdata_ipkt, flowdata_ibyt, flowdata_opkt, flowdata_obyt, flowdata_ra from flowdata where ( ( flowdata_te >= '2014-05-07T14:41:50' AND flowdata_te < '2014-05-07T14:51:50' ) and flowdata_ra='158.125.48.166' );")
#query_res <- dbGetQuery(con,"select flowdata_ts, flowdata_te, flowdata_sa, flowdata_da, flowdata_sp, flowdata_dp, flowdata_pr, flowdata_ipkt, flowdata_ibyt, flowdata_ra from flowdata where ( ( flowdata_te >= '2014-05-05T00:00:00' AND flowdata_te < '2014-05-11T23:59:59' ) and flowdata_ra='158.125.48.166' );")
SQL_statement <- "query_res <- dbGetQuery(con,"select flowdata_te, flowdata_ibyt, flowdata_ra from flowdata where ( ( flowdata_te >= '2014-05-05T00:00:00' AND flowdata_te < '2014-05-11T23:59:59' ) and flowdata_ra='158.125.48.166' );") "
query_res <- dbGetQuery(con,SQL_statement)
overall_time <- as.numeric(difftime(query_res[nrow(query_res),"flowdata_te"],query_res[1,"flowdata_te"], unit="secs"))
avg_throughput <- (sum(as.numeric(query_res$flowdata_ibyt)/1024)) / overall_time    # KByte per seconds
#nu.mins <- floor(as.numeric(difftime(query_res[nrow(query_res),"flowdata_te"],query_res[1,"flowdata_te"], unit="mins")))
####
# query_res_clean <- quer_res[query_res2$flowdata_td > 0, ]
# query_res_clean$i_tput <- query_res_clean$flowdata_ibyt / query_res_clean$flowdata_td
# overall_time_clean <- as.numeric(difftime(query_res_clean[nrow(query_res_clean),1],query_res_clean[1,1], unit="secs"))
#avg_throughput_clean <- (sum(query_res_clean$flowdata_ibyt)/1024) / overall_time_clean	 # KByte per seconds
####
#break.points <- cut(query_res$flowdata_te, breaks='1 min')
KBytes_pm <- (tapply(query_res$flowdata_ibyt, cut(query_res$flowdata_te, breaks='1 min'), sum)) / 1024
# Make 1D array into Data Frame
KBpm_DF <- data.frame(key= names(KBytes_pm), value=as.numeric(KBytes_pm))
KBpm_DF$key <- as.character(KBpm_DF$key)
KBpm_DF$key <- strptime(KBpm_DF$key, format="%Y-%m-%d %H:%M:%S")
# Remove NA inserted during tapply step (because there might not be any flows ending at a specific minute)
KBpm_DF <- KBpm_DF[complete.cases(KBpm_DF$value),]
options(scipen=1)
plot(KBpm_DF$key, KBpm_DF$value, type ="l", xlab="", ylab="KBytes per minute", col="blue")
dbDisconnect(con)
dbUnloadDriver(drv)
library(lubridate)
library(reshape2)
require(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, host='192.168.1.111', user="flexible_netflow", password="", dbname="flexible_netflow")
SQL_statement <- "select flowdata_te, flowdata_ibyt, flowdata_ra from flowdata where ( ( flowdata_te >= '2014-05-05T00:00:00' AND flowdata_te < '2014-05-11T23:59:59' ) and flowdata_ra='158.125.48.166' );"
query_res <- dbGetQuery(con,SQL_statement)
overall_time <- as.numeric(difftime(query_res[nrow(query_res),"flowdata_te"],query_res[1,"flowdata_te"], unit="secs"))
avg_throughput <- (sum(as.numeric(query_res$flowdata_ibyt)/1024)) / overall_time    # KByte per seconds
#nu.mins <- floor(as.numeric(difftime(query_res[nrow(query_res),"flowdata_te"],query_res[1,"flowdata_te"], unit="mins")))
####
# query_res_clean <- quer_res[query_res2$flowdata_td > 0, ]
# query_res_clean$i_tput <- query_res_clean$flowdata_ibyt / query_res_clean$flowdata_td
# overall_time_clean <- as.numeric(difftime(query_res_clean[nrow(query_res_clean),1],query_res_clean[1,1], unit="secs"))
#avg_throughput_clean <- (sum(query_res_clean$flowdata_ibyt)/1024) / overall_time_clean	 # KByte per seconds
####
#break.points <- cut(query_res$flowdata_te, breaks='1 min')
KBytes_pm <- (tapply(query_res$flowdata_ibyt, cut(query_res$flowdata_te, breaks='1 min'), sum)) / 1024
# Make 1D array into Data Frame
KBpm_DF <- data.frame(key= names(KBytes_pm), value=as.numeric(KBytes_pm))
KBpm_DF$key <- as.character(KBpm_DF$key)
KBpm_DF$key <- strptime(KBpm_DF$key, format="%Y-%m-%d %H:%M:%S")
# Remove NA inserted during tapply step (because there might not be any flows ending at a specific minute)
KBpm_DF <- KBpm_DF[complete.cases(KBpm_DF$value),]
options(scipen=1)
plot(KBpm_DF$key, KBpm_DF$value, type ="l", xlab="", ylab="KBytes per minute", col="blue")
dbDisconnect(con)
dbUnloadDriver(drv)
library(lubridate)
library(reshape2)
require(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, host='192.168.1.111', user="flexible_netflow", password="", dbname="flexible_netflow")
#dbListConnections(drv)
#dbGetInfo(drv)
#summary(con)
#rs <- dbSendQuery(con,"select * from flowdata_1392634800;")
#fetch(rs,n=-1)
#query_res <- dbGetQuery(con,"select flowdata_ts, flowdata_te, flowdata_td, flowdata_sa, flowdata_da, flowdata_ipkt, flowdata_ibyt, flowdata_opkt, flowdata_obyt, flowdata_ra from flowdata where ( ( flowdata_te >= '2014-05-07T14:41:50' AND flowdata_te < '2014-05-07T14:51:50' ) and flowdata_ra='158.125.48.166' );")
#query_res <- dbGetQuery(con,"select flowdata_ts, flowdata_te, flowdata_sa, flowdata_da, flowdata_sp, flowdata_dp, flowdata_pr, flowdata_ipkt, flowdata_ibyt, flowdata_ra from flowdata where ( ( flowdata_te >= '2014-05-05T00:00:00' AND flowdata_te < '2014-05-11T23:59:59' ) and flowdata_ra='158.125.48.166' );")
SQL_statement <- "select flowdata_te, flowdata_ibyt, flowdata_ra from flowdata where ( ( flowdata_te >= '2014-05-05T00:00:00' AND flowdata_te < '2014-05-5T23:59:59' ) and flowdata_ra='158.125.48.166' );"
query_res <- dbGetQuery(con,SQL_statement)
overall_time <- as.numeric(difftime(query_res[nrow(query_res),"flowdata_te"],query_res[1,"flowdata_te"], unit="secs"))
avg_throughput <- (sum(as.numeric(query_res$flowdata_ibyt)/1024)) / overall_time    # KByte per seconds
#nu.mins <- floor(as.numeric(difftime(query_res[nrow(query_res),"flowdata_te"],query_res[1,"flowdata_te"], unit="mins")))
####
# query_res_clean <- quer_res[query_res2$flowdata_td > 0, ]
# query_res_clean$i_tput <- query_res_clean$flowdata_ibyt / query_res_clean$flowdata_td
# overall_time_clean <- as.numeric(difftime(query_res_clean[nrow(query_res_clean),1],query_res_clean[1,1], unit="secs"))
#avg_throughput_clean <- (sum(query_res_clean$flowdata_ibyt)/1024) / overall_time_clean	 # KByte per seconds
####
#break.points <- cut(query_res$flowdata_te, breaks='1 min')
KBytes_pm <- (tapply(query_res$flowdata_ibyt, cut(query_res$flowdata_te, breaks='1 min'), sum)) / 1024
# Make 1D array into Data Frame
KBpm_DF <- data.frame(key= names(KBytes_pm), value=as.numeric(KBytes_pm))
KBpm_DF$key <- as.character(KBpm_DF$key)
KBpm_DF$key <- strptime(KBpm_DF$key, format="%Y-%m-%d %H:%M:%S")
# Remove NA inserted during tapply step (because there might not be any flows ending at a specific minute)
KBpm_DF <- KBpm_DF[complete.cases(KBpm_DF$value),]
options(scipen=1)
plot(KBpm_DF$key, KBpm_DF$value, type ="l", xlab="", ylab="KBytes per minute", col="blue")
dbDisconnect(con)
dbUnloadDriver(drv)
library(lubridate)
library(reshape2)
require(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, host='192.168.1.111', user="flexible_netflow", password="", dbname="flexible_netflow")
#dbListConnections(drv)
#dbGetInfo(drv)
#summary(con)
#rs <- dbSendQuery(con,"select * from flowdata_1392634800;")
#fetch(rs,n=-1)
#query_res <- dbGetQuery(con,"select flowdata_ts, flowdata_te, flowdata_td, flowdata_sa, flowdata_da, flowdata_ipkt, flowdata_ibyt, flowdata_opkt, flowdata_obyt, flowdata_ra from flowdata where ( ( flowdata_te >= '2014-05-07T14:41:50' AND flowdata_te < '2014-05-07T14:51:50' ) and flowdata_ra='158.125.48.166' );")
#query_res <- dbGetQuery(con,"select flowdata_ts, flowdata_te, flowdata_sa, flowdata_da, flowdata_sp, flowdata_dp, flowdata_pr, flowdata_ipkt, flowdata_ibyt, flowdata_ra from flowdata where ( ( flowdata_te >= '2014-05-05T00:00:00' AND flowdata_te < '2014-05-11T23:59:59' ) and flowdata_ra='158.125.48.166' );")
#SQL_statement <- "select flowdata_te, flowdata_ibyt, flowdata_ra from flowdata where ( ( flowdata_te >= '2014-05-05T00:00:00' AND flowdata_te < '2014-05-5T23:59:59' ) and flowdata_ra='158.125.48.166' );"
SQL_statement <- paste("select flowdata_te, flowdata_ibyt, flowdata_ra from flowdata where ( ( flowdata_te >= '", start, "' AND flowdata_te < '", end,     ") and flowdata_ra='158.125.48.166' );"
query_res <- dbGetQuery(con,SQL_statement)
overall_time <- as.numeric(difftime(query_res[nrow(query_res),"flowdata_te"],query_res[1,"flowdata_te"], unit="secs"))
avg_throughput <- (sum(as.numeric(query_res$flowdata_ibyt)/1024)) / overall_time    # KByte per seconds
#nu.mins <- floor(as.numeric(difftime(query_res[nrow(query_res),"flowdata_te"],query_res[1,"flowdata_te"], unit="mins")))
####
# query_res_clean <- quer_res[query_res2$flowdata_td > 0, ]
# query_res_clean$i_tput <- query_res_clean$flowdata_ibyt / query_res_clean$flowdata_td
# overall_time_clean <- as.numeric(difftime(query_res_clean[nrow(query_res_clean),1],query_res_clean[1,1], unit="secs"))
#avg_throughput_clean <- (sum(query_res_clean$flowdata_ibyt)/1024) / overall_time_clean	 # KByte per seconds
####
#break.points <- cut(query_res$flowdata_te, breaks='1 min')
KBytes_pm <- (tapply(query_res$flowdata_ibyt, cut(query_res$flowdata_te, breaks='1 min'), sum)) / 1024
# Make 1D array into Data Frame
KBpm_DF <- data.frame(key= names(KBytes_pm), value=as.numeric(KBytes_pm))
KBpm_DF$key <- as.character(KBpm_DF$key)
KBpm_DF$key <- strptime(KBpm_DF$key, format="%Y-%m-%d %H:%M:%S")
# Remove NA inserted during tapply step (because there might not be any flows ending at a specific minute)
KBpm_DF <- KBpm_DF[complete.cases(KBpm_DF$value),]
options(scipen=1)
plot(KBpm_DF$key, KBpm_DF$value, type ="l", xlab="", ylab="KBytes per minute", col="blue")
dbDisconnect(con)
dbUnloadDriver(drv)
SQL_statement <- paste("select flowdata_te, flowdata_ibyt, flowdata_ra from flowdata where ( ( flowdata_te >= '", start, "' AND flowdata_te < '", end,") and flowdata_ra='158.125.48.166' );"
)
SQL_statement <- paste("select flowdata_te, flowdata_ibyt, flowdata_ra from flowdata where ( ( flowdata_te >= '", start, "' AND flowdata_te < '", end,"') and flowdata_ra='158.125.48.166' );")
SQL_statement <- paste("select flowdata_te, flowdata_ibyt, flowdata_ra from flowdata where ( ( flowdata_te >= '", start, "' AND flowdata_te < '", end,"') and flowdata_ra='158.125.48.166' );")
SQL_statement <- paste("select flowdata_te, flowdata_ibyt, flowdata_ra from flowdata where ( ( flowdata_te >= '")
SQL_statement
start <- as.character(2014-05-05T00:00:00)
start <- as.character("2014-05-05T00:00:00")
start
SQL_statement <- paste("select flowdata_te, flowdata_ibyt, flowdata_ra from flowdata where ( ( flowdata_te >= '", start)
SQL_statement
SQL_statement <- paste("select flowdata_te, flowdata_ibyt, flowdata_ra from flowdata where ( ( flowdata_te >= '",start)
SQL_statement
SQL_statement <- paste("select flowdata_te, flowdata_ibyt, flowdata_ra from flowdata where ( ( flowdata_te >='",start)
SQL_statement
?paste
SQL_statement <- paste("select flowdata_te, flowdata_ibyt, flowdata_ra from flowdata where ( ( flowdata_te >='",start, sep="")
SQL_statement
SQL_statement <- paste("select flowdata_te, flowdata_ibyt, flowdata_ra from flowdata where ( ( flowdata_te >='",start, "'AND flowdata_te <'", end ,"') and flowdata_ra='158.125.48.166' );",  sep="")
end <- as.character(2014-05-05T59:00:00)
end <- as.character("2014-05-05T59:00:00")
SQL_statement <- paste("select flowdata_te, flowdata_ibyt, flowdata_ra from flowdata where ( ( flowdata_te >='",start, "'AND flowdata_te <'", end ,"') and flowdata_ra='158.125.48.166' );",  sep="")
SQL_statement
SQL_statement2 <- "select flowdata_te, flowdata_ibyt, flowdata_ra from flowdata where ( ( flowdata_te >= '2014-05-05T00:00:00' AND flowdata_te < '2014-05-5T23:59:59' ) and flowdata_ra='158.125.48.166' );"
SQL_statement
SQL_statement2
library(lubridate)
library(reshape2)
require(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, host='192.168.1.111', user="flexible_netflow", password="", dbname="flexible_netflow")
#dbListConnections(drv)
#dbGetInfo(drv)
#summary(con)
#rs <- dbSendQuery(con,"select * from flowdata_1392634800;")
#fetch(rs,n=-1)
#query_res <- dbGetQuery(con,"select flowdata_ts, flowdata_te, flowdata_td, flowdata_sa, flowdata_da, flowdata_ipkt, flowdata_ibyt, flowdata_opkt, flowdata_obyt, flowdata_ra from flowdata where ( ( flowdata_te >= '2014-05-07T14:41:50' AND flowdata_te < '2014-05-07T14:51:50' ) and flowdata_ra='158.125.48.166' );")
#query_res <- dbGetQuery(con,"select flowdata_ts, flowdata_te, flowdata_sa, flowdata_da, flowdata_sp, flowdata_dp, flowdata_pr, flowdata_ipkt, flowdata_ibyt, flowdata_ra from flowdata where ( ( flowdata_te >= '2014-05-05T00:00:00' AND flowdata_te < '2014-05-11T23:59:59' ) and flowdata_ra='158.125.48.166' );")
SQL_statement <- "select flowdata_te, flowdata_ibyt, flowdata_ra from flowdata where ( ( flowdata_te >= '2014-05-05T00:00:00' AND flowdata_te < '2014-05-05T23:59:59' ) and flowdata_ra='158.125.48.166' );"
query_res <- dbGetQuery(con,SQL_statement)
overall_time <- as.numeric(difftime(query_res[nrow(query_res),"flowdata_te"],query_res[1,"flowdata_te"], unit="secs"))
avg_throughput <- (sum(as.numeric(query_res$flowdata_ibyt)/1024)) / overall_time    # KByte per seconds
#nu.mins <- floor(as.numeric(difftime(query_res[nrow(query_res),"flowdata_te"],query_res[1,"flowdata_te"], unit="mins")))
####
# query_res_clean <- quer_res[query_res2$flowdata_td > 0, ]
# query_res_clean$i_tput <- query_res_clean$flowdata_ibyt / query_res_clean$flowdata_td
# overall_time_clean <- as.numeric(difftime(query_res_clean[nrow(query_res_clean),1],query_res_clean[1,1], unit="secs"))
#avg_throughput_clean <- (sum(query_res_clean$flowdata_ibyt)/1024) / overall_time_clean	 # KByte per seconds
####
#break.points <- cut(query_res$flowdata_te, breaks='1 min')
KBytes_pm <- (tapply(query_res$flowdata_ibyt, cut(query_res$flowdata_te, breaks='1 min'), sum)) / 1024
# Make 1D array into Data Frame
KBpm_DF <- data.frame(key= names(KBytes_pm), value=as.numeric(KBytes_pm))
KBpm_DF$key <- as.character(KBpm_DF$key)
KBpm_DF$key <- strptime(KBpm_DF$key, format="%Y-%m-%d %H:%M:%S")
# Remove NA inserted during tapply step (because there might not be any flows ending at a specific minute)
KBpm_DF <- KBpm_DF[complete.cases(KBpm_DF$value),]
options(scipen=1)
plot(KBpm_DF$key, KBpm_DF$value, type ="l", xlab="", ylab="KBytes per minute", col="blue")
dbDisconnect(con)
dbUnloadDriver(drv)
library(lubridate)
library(reshape2)
require(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, host='192.168.1.111', user="flexible_netflow", password="", dbname="flexible_netflow")
#dbListConnections(drv)
#dbGetInfo(drv)
#summary(con)
#rs <- dbSendQuery(con,"select * from flowdata_1392634800;")
#fetch(rs,n=-1)
#query_res <- dbGetQuery(con,"select flowdata_ts, flowdata_te, flowdata_td, flowdata_sa, flowdata_da, flowdata_ipkt, flowdata_ibyt, flowdata_opkt, flowdata_obyt, flowdata_ra from flowdata where ( ( flowdata_te >= '2014-05-07T14:41:50' AND flowdata_te < '2014-05-07T14:51:50' ) and flowdata_ra='158.125.48.166' );")
#query_res <- dbGetQuery(con,"select flowdata_ts, flowdata_te, flowdata_sa, flowdata_da, flowdata_sp, flowdata_dp, flowdata_pr, flowdata_ipkt, flowdata_ibyt, flowdata_ra from flowdata where ( ( flowdata_te >= '2014-05-05T00:00:00' AND flowdata_te < '2014-05-11T23:59:59' ) and flowdata_ra='158.125.48.166' );")
SQL_statement <- "select flowdata_te, flowdata_ibyt, flowdata_ra from flowdata where ( ( flowdata_te >= '2014-05-05T00:00:00' AND flowdata_te < '2014-05-05T23:59:59' ) and flowdata_ra='158.125.48.166' );"
query_res <- dbGetQuery(con,SQL_statement)
overall_time <- as.numeric(difftime(query_res[nrow(query_res),"flowdata_te"],query_res[1,"flowdata_te"], unit="secs"))
avg_throughput <- (sum(as.numeric(query_res$flowdata_ibyt)/1024)) / overall_time    # KByte per seconds
#nu.mins <- floor(as.numeric(difftime(query_res[nrow(query_res),"flowdata_te"],query_res[1,"flowdata_te"], unit="mins")))
####
# query_res_clean <- quer_res[query_res2$flowdata_td > 0, ]
# query_res_clean$i_tput <- query_res_clean$flowdata_ibyt / query_res_clean$flowdata_td
# overall_time_clean <- as.numeric(difftime(query_res_clean[nrow(query_res_clean),1],query_res_clean[1,1], unit="secs"))
#avg_throughput_clean <- (sum(query_res_clean$flowdata_ibyt)/1024) / overall_time_clean	 # KByte per seconds
####
#break.points <- cut(query_res$flowdata_te, breaks='1 min')
KBytes_pm <- (tapply(query_res$flowdata_ibyt, cut(query_res$flowdata_te, breaks='1 min'), sum)) / 1024
# Make 1D array into Data Frame
KBpm_DF <- data.frame(key= names(KBytes_pm), value=as.numeric(KBytes_pm))
KBpm_DF$key <- as.character(KBpm_DF$key)
KBpm_DF$key <- strptime(KBpm_DF$key, format="%Y-%m-%d %H:%M:%S")
# Remove NA inserted during tapply step (because there might not be any flows ending at a specific minute)
KBpm_DF <- KBpm_DF[complete.cases(KBpm_DF$value),]
options(scipen=1)
plot(KBpm_DF$key, KBpm_DF$value, type ="l", xlab="", ylab="KBytes per minute", col="blue")
dbDisconnect(con)
dbUnloadDriver(drv)
dbListConnections(drv)
library(lubridate)
library(reshape2)
require(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, host='192.168.1.111', user="flexible_netflow", password="", dbname="flexible_netflow")
dbUnloadDriver(drv)
dbDisconnect(con)
dbListConnections
dbListConnections()
dbListConnections(drv)
?dbListConnections()
?dbListConnections
library(lubridate)
library(reshape2)
require(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, host='192.168.1.111', user="flexible_netflow", password="", dbname="flexible_netflow")
dbListConnections(con)
dbListConnections(drv)
?dbListConnections(drv)
?dbListConnections(drv)[1]
?dbListConnections(drv)[[1]]
?dbListConnections(drv)
dbListConnections(drv)
dbListConnections(drv)[[1]]
dbListConnections(drv)[[2]]
dbListConnections(drv)[[1]]
dbListConnections(drv)[1]
dbListConnections(drv)[1][1]
dbListConnections(drv)[1][2]
dbListConnections(drv)[1]
class(dbListConnections(drv))
dbListConnections(drv)[1]
str(dbListConnections(drv))
dbListConnections(drv)[1]
dbListConnections(drv)
for(con in dbListConnections(drv)){
print(con)
}
for(con in dbListConnections(drv)){
dbDisconnect(con)
}
dbListConnections(drv)
write.csv(KBpm_DF, file = "test.csv", sep = ",", eol = "\n")
library(lubridate)
library(reshape2)
require(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, host='192.168.1.111', user="flexible_netflow", password="", dbname="flexible_netflow")
SQL_statement <- "select flowdata_te, flowdata_ibyt, flowdata_ra from flowdata where ( ( flowdata_te >= '2014-05-05T00:00:00' AND flowdata_te < '2014-05-05T23:59:59' ) and flowdata_ra='158.125.48.166' );"
query_res <- dbGetQuery(con,SQL_statement)
overall_time <- as.numeric(difftime(query_res[nrow(query_res),"flowdata_te"],query_res[1,"flowdata_te"], unit="secs"))
avg_throughput <- (sum(as.numeric(query_res$flowdata_ibyt)/1024)) / overall_time    # KByte per seconds
KBytes_pm <- (tapply(query_res$flowdata_ibyt, cut(query_res$flowdata_te, breaks='1 min'), sum)) / 1024
# Make 1D array into Data Frame
KBpm_DF <- data.frame(key= names(KBytes_pm), value=as.numeric(KBytes_pm))
KBpm_DF$key <- as.character(KBpm_DF$key)
KBpm_DF$key <- strptime(KBpm_DF$key, format="%Y-%m-%d %H:%M:%S")
# Remove NA inserted during tapply step (because there might not be any flows ending at a specific minute)
KBpm_DF <- KBpm_DF[complete.cases(KBpm_DF$value),]
options(scipen=1)
plot(KBpm_DF$key, KBpm_DF$value, type ="l", xlab="", ylab="KBytes per minute", col="blue")
write.csv(KBpm_DF, file = "test.csv", sep = ",", eol = "\n")
write.csv(KBpm_DF, file = "test.csv", sep = ",", eol = "\n")
write.csv(KBpm_DF, file = "test.csv", eol = "\n")
write.csv(KBpm_DF, file = "test.csv", sep = ",", eol = "\n")
write.csv(KBpm_DF, file = "test.csv", eol = "\n")
?write.csv
write.csv(KBpm_DF, file = "test.csv", row.names = FALSE, eol = "\n")
?print
library(lubridate)
library(reshape2)
require(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, host='192.168.1.111', user="flexible_netflow", password="", dbname="flexible_netflow")
SQL_statement <- "select flowdata_te, flowdata_ibyt, flowdata_ra from flowdata where ( ( flowdata_te >= '2014-05-05T00:00:00' AND flowdata_te < '2014-05-11T23:59:59' ) and flowdata_ra='192.168.1.129' );"
query_res <- dbGetQuery(con,SQL_statement)
overall_time <- as.numeric(difftime(query_res[nrow(query_res),"flowdata_te"],query_res[1,"flowdata_te"], unit="secs"))
avg_throughput <- (sum(as.numeric(query_res$flowdata_ibyt)/1024)) / overall_time    # KByte per seconds
KBytes_pm <- (tapply(query_res$flowdata_ibyt, cut(query_res$flowdata_te, breaks='1 min'), sum)) / 1024
# Make 1D array into Data Frame
KBpm_DF <- data.frame(key= names(KBytes_pm), value=as.numeric(KBytes_pm))
KBpm_DF$key <- as.character(KBpm_DF$key)
KBpm_DF$key <- strptime(KBpm_DF$key, format="%Y-%m-%d %H:%M:%S")
# Remove NA inserted during tapply step (because there might not be any flows ending at a specific minute)
KBpm_DF <- KBpm_DF[complete.cases(KBpm_DF$value),]
options(scipen=1)
plot(KBpm_DF$key, KBpm_DF$value, type ="l", xlab="", ylab="KBytes per minute", col="blue")
# Create file for download
write.csv(KBpm_DF, file = "test.csv", row.names = FALSE, eol = "\n")
dbDisconnect(con)
dbUnloadDriver(drv)
library(lubridate)
library(reshape2)
require(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, host='192.168.1.111', user="flexible_netflow", password="", dbname="flexible_netflow")
SQL_statement <- "select flowdata_te, flowdata_ibyt, flowdata_ra from flowdata where ( ( flowdata_te >= '2014-05-05T00:00:00' AND flowdata_te < '2014-05-11T23:59:59' ) and flowdata_ra='192.168.1.129' );"
query_res <- dbGetQuery(con,SQL_statement)
overall_time <- as.numeric(difftime(query_res[nrow(query_res),"flowdata_te"],query_res[1,"flowdata_te"], unit="secs"))
avg_throughput <- (sum(as.numeric(query_res$flowdata_ibyt)/1024)) / overall_time    # KByte per seconds
KBytes_pm <- (tapply(query_res$flowdata_ibyt, cut(query_res$flowdata_te, breaks='1 min'), sum)) / 1024
# Make 1D array into Data Frame
KBpm_DF <- data.frame(key= names(KBytes_pm), value=as.numeric(KBytes_pm))
KBpm_DF$key <- as.character(KBpm_DF$key)
KBpm_DF$key <- strptime(KBpm_DF$key, format="%Y-%m-%d %H:%M:%S")
# Remove NA inserted during tapply step (because there might not be any flows ending at a specific minute)
KBpm_DF <- KBpm_DF[complete.cases(KBpm_DF$value),]
options(scipen=1)
plot(KBpm_DF$key, KBpm_DF$value, type ="l", xlab="", ylab="KBytes per minute", col="blue")
# Create file for download
write.csv(KBpm_DF, file = "test.csv", row.names = FALSE, eol = "\n")
dbDisconnect(con)
dbUnloadDriver(drv)
data(UCBAdmissions)
class(UCBAdmissions)
UCBAdmissions
DF = as.data.frame(UCBAdmissions)
DF
summary(DF)
class(DF)
summary(DF)
str(DF)
?xtabs
xt <- xtabs(Freq ~ Gender + ADmit, data=DF)
xt <- xtabs(Freq ~ Gender + Admit, data=DF)
xt
class(xt)
warpbreaks$replicate <- rep(1:9, len = 54)
warpbreaks$replicate
xt <- xtabs(breaks ~., data=warpbreaks)
xt
warpbreaks
ftable(xt)
class(ftable(xt))
head(mtcars)
str(mtcars)
mtcars$carname <- rownames(mtcars)
mtcars
carMelt <- melt(mtcars, id=c("carname","gear","cyl"), measure.vars=c("mpg","hp"))
library(reshape2)
carMelt <- melt(mtcars, id=c("carname","gear","cyl"), measure.vars=c("mpg","hp"))
class(carMelt)
str(carMelt)
str(mtcars)
cylData <- dcast(carMelt, cyl ~variable)
cylData <- dcast(carMelt, cyl ~ variable)
dcast
?dcast
carMelt
class(carMelt)
cylData <- dcast(carMelt, cyl ~ variable)
cylData
class(cylData)
InsectSprays
Insect_melt <- melt(InsectSprays, id="count", measure.vars="spray")
Insect_melt
Insect_melt <- melt(InsectSprays, id="count", measure.vars=spray)
Insect_cast <- dcast(Insect_melt, count ~ variable)
Insect_cast
Insect_cast <- dcast(Insect_melt, count ~ variable, sum)
Insect_cast <- dcast(Insect_melt, count ~ variable, mean)
Insect_cast
Insect_melt <- melt(InsectSprays, id="spray", measure.vars="count")
Insect_cast <- dcast(Insect_melt, spray ~ variable, mean)
Insect_cast <- dcast(Insect_melt, spray ~ variable, sum)
Insect_cast
?aggregate
Insect_cast
InsectSprays
aggregate(InsectSprays, InsectSprays$spray)
aggregate(InsectSprays, InsectSprays$spray, sum)
aggregate(InsectSprays, by=list(InsectSprays$spray), FUN=sum)
aggregate(InsectSprays, by=list(InsectSprays$count), FUN=sum)
str(InsectSprays)
cylData
aggdata <-aggregate(mtcars, by=list(mtcars$cyl,mtcars$vs), FUN=mean, na.rm=TRUE)
aggdata <-aggregate(mtcars, by=list(mtcars$cyl,mtcars$vs), FUN=mean, na.rm=TRUE)
attach(mtcars)
aggdata <-aggregate(mtcars, by=list(cyl,vs),
FUN=mean, na.rm=TRUE)
print(aggdata)
detach(mtcars)
aggdata
aggdata <-aggregate(mtcars, by=list(mtcars$cyl,mtcars$vs), FUN=mean, na.rm=TRUE)
attach(mtcars)
aggdata <-aggregate(mtcars, by=list(mtcars$cyl,mtcars$vs), FUN=mean, na.rm=TRUE)
aggdata <-aggregate(mtcars, by=list(cyl,vs), FUN=mean, na.rm=TRUE)
aggdata <-aggregate(mtcars, by=list(cyl,vs),FUN=mean, na.rm=TRUE)
print(aggdata)
detach(mtcars)
?read.table
?make.name
?make.names
?glm()
setwd("/Users/kostas/Documents/GitHub\ Projects/RepData_PeerAssessment1")
